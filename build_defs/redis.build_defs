def redis_stack(name:str, version:str, os=None, arch=None, libc:str='glibc', download=None, hashes:list=[], visibility:list=[], _compress:bool=False):
    """
    Builds Redis Stack binaries from source for a specific OS and architecture.

    Hashes can be found here: https://github.com/redis/redis-hashes
    Args:
        name (str): Name of the rule.
        version (str): Redis version to build.
        os (str): Target operating system. Defaults to the current OS.
        arch (str): Target architecture. Defaults to the current architecture.
        libc (str): C library to link against ('glibc' or 'musl'). Defaults to 'glibc'.
                    'musl' builds statically-linked binaries compatible with Alpine Linux.
        download (str): Optional pre-existing download target to use. If not provided,
                        a new download will be created.
        hashes (list): Optional hashes to verify the download (only used if download is None).
        visibility (list): Visibility declaration for the rule.
    """
    if not os:
        if CONFIG.OS == 'linux':
            os = 'linux'
        elif CONFIG.OS == 'darwin':
            os = 'osx'
        else:
            raise ParseError(f'Unknown OS {CONFIG.OS}, you must pass explitly')
    if not arch:
        if CONFIG.ARCH == 'amd64':
            arch = 'x86_64'
        elif CONFIG.ARCH == 'x86':
            arch = 'i686'
        else:
            raise ParseError(f'Unknown architecture {CONFIG.ARCH}, you must pass explitly')

    # Determine build target and compiler settings based on libc
    target_suffix = f'-{libc}' if libc == 'musl' else ''
    target = f'{os}_{arch}{target_suffix}'
    base_target = f'{os}_{arch}'  # Used for shared download

    # Configure compiler and flags for musl (static) or glibc (dynamic)
    if libc == 'musl':
        cc = 'musl-gcc'
        cflags = '"-fno-lto -static"'
        ldflags = '"-fno-lto -static"'
        # For musl, disable TLS and use libc malloc to avoid external dependencies
        build_tls = 'no'
        malloc = 'libc'
    else:
        cc = 'gcc'
        cflags = '"-fno-lto"'
        ldflags = '"-fno-lto"'
        build_tls = 'yes'
        malloc = 'jemalloc'

    # Use provided download or create a new one
    if not download:
        url = f"https://download.redis.io/releases/redis-{version}.tar.gz"
        download_name = f"_redis_download_{version}_{base_target}"
        download = remote_file(
            name=download_name,
            url=url,
            hashes=hashes,
        )
    extract = build_rule(
        name=tag(name, f"extract_{target}"),
        srcs=[download],
        outs=[f'redis-{version}-{target}'],
        cmd =  ' && '.join([
            'tar -xzf $SRC',
            f'mv redis-{version} $OUT'
        ]),
        building_description = f'Extracting Redis v{version} for {target}...',
    )
    install = build_rule(
        name=tag(name, f"install_{target}"),
        srcs=[extract],
        outs={
            'redis-server': [f'{target}/redis/redis-server'],
            'redis-cli': [f'{target}/redis/redis-cli'],
            'redis-sentinel': [f'{target}/redis/redis-sentinel'],
            'redis-benchmark': [f'{target}/redis/redis-benchmark'],
            'redis-check-aof': [f'{target}/redis/redis-check-aof'],
            'redis-check-rdb': [f'{target}/redis/redis-check-rdb'],
        },
        cmd = ' && '.join([
            f'mkdir -p {target}/redis',
            'cd $SRC',
            f'make BUILD_TLS={build_tls} MALLOC={malloc} CC={cc} CFLAGS={cflags} LDFLAGS={ldflags}',
            f'mv src/redis-server $HOME/{target}/redis',
            f'mv src/redis-cli $HOME/{target}/redis',
            f'mv src/redis-sentinel $HOME/{target}/redis',
            f'mv src/redis-benchmark $HOME/{target}/redis',
            f'mv src/redis-check-aof $HOME/{target}/redis',
            f'mv src/redis-check-rdb $HOME/{target}/redis',
            'cd $HOME',
        ]),
        building_description = f'Installing Redis Stack v{version} for {target}',
    )
    if _compress:
        tarball(
            name=name,
            out=f'redis-{version}-{target}.tar.gz',
            srcs=[
                install + '|redis-server',
                install + '|redis-cli',
                install + '|redis-sentinel',
                install + '|redis-benchmark',
                install + '|redis-check-aof',
                install + '|redis-check-rdb',
            ],
        )
    else:
        filegroup(
            name=name,
            srcs=[
                install + '|redis-server',
                install + '|redis-cli',
                install + '|redis-sentinel',
                install + '|redis-benchmark',
                install + '|redis-check-aof',
                install + '|redis-check-rdb',
            ],
            deps = [install],
            binary=True,
            visibility=visibility,
        )
